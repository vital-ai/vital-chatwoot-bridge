#!/usr/bin/env python3
"""
Script to set configuration environment variables for local testing and AWS deployment.
"""

import json
import logging
import os
import sys
from pathlib import Path

logger = logging.getLogger(__name__)

def load_json_config(config_file: str) -> str:
    """Load JSON configuration file and return as string."""
    config_path = Path(config_file)
    
    if not config_path.exists():
        raise FileNotFoundError(f"Configuration file not found: {config_file}")
    
    with open(config_path, 'r') as f:
        config_data = json.load(f)
    
    # Return as compact JSON string
    return json.dumps(config_data, separators=(',', ':'))

def set_local_env_vars():
    """Set environment variables for local development."""
    project_root = Path(__file__).parent.parent
    config_file = project_root / "config" / "inbox_agent_mappings.json"
    
    try:
        # Load inbox-agent mappings
        mappings_json = load_json_config(config_file)
        
        # Set environment variables
        env_vars = {
            "CHATWOOT_BASE_URL": "http://localhost:9000",  # Mock Chatwoot for testing
            "CHATWOOT_API_ACCESS_TOKEN": "test-token-123",
            "CHATWOOT_ACCOUNT_ID": "1",
            "INBOX_AGENT_MAPPINGS": mappings_json,
            "DEFAULT_RESPONSE_TIMEOUT": "30",
            "ENABLE_SYNC_RESPONSES": "true",
            "ENABLE_ASYNC_RESPONSES": "true",
            "WEBSOCKET_CONNECT_TIMEOUT": "10",
            "WEBSOCKET_PING_INTERVAL": "30",
            "WEBSOCKET_PING_TIMEOUT": "10"
        }
        
        # Write to .env file
        env_file = project_root / ".env"
        with open(env_file, 'w') as f:
            f.write("# Vital Chatwoot Bridge - Local Development Environment\n")
            f.write("# Generated by scripts/set_config_env.py\n\n")
            
            for key, value in env_vars.items():
                f.write(f'{key}="{value}"\n')
        
        logger.info(f"‚úÖ CONFIG: Environment variables written to {env_file}")
        logger.info(f"üìã CONFIG: Configuration loaded from {config_file}")
        
        # Print the mappings for verification
        mappings = json.loads(mappings_json)
        logger.info(f"\nüìä CONFIG: Inbox-Agent Mappings ({len(mappings)} configured):")
        for mapping in mappings:
            inbox_id = mapping['inbox_id']
            agent_id = mapping['agent_config']['agent_id']
            websocket_url = mapping['agent_config']['websocket_url']
            logger.info(f"  CONFIG: - Inbox {inbox_id} ‚Üí Agent '{agent_id}' ({websocket_url})")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå CONFIG: Error setting environment variables: {e}")
        return False

def generate_aws_secrets_commands():
    """Generate AWS CLI commands to create secrets."""
    project_root = Path(__file__).parent.parent
    config_file = project_root / "config" / "inbox_agent_mappings.json"
    
    try:
        mappings_json = load_json_config(config_file)
        
        logger.info("üîê CONFIG: AWS Secrets Manager Commands:")
        logger.info("CONFIG: " + "=" * 50)
        logger.info("CONFIG: # Replace REGION and ACCOUNT_ID with your actual values")
        logger.info("")
        
        # Base URL secret
        logger.info("CONFIG: # Chatwoot Base URL")
        logger.info("CONFIG: aws secretsmanager create-secret \\\\")
        logger.info("CONFIG:   --name 'vital-chatwoot-bridge/chatwoot-base-url' \\\\")
        logger.info("CONFIG:   --description 'Chatwoot instance base URL' \\\\")
        logger.info("CONFIG:   --secret-string 'https://your-chatwoot-instance.com' \\\\")
        logger.info("CONFIG:   --region REGION")
        logger.info("")
        
        # API Token secret
        logger.info("CONFIG: # Chatwoot API Access Token")
        logger.info("CONFIG: aws secretsmanager create-secret \\")
        logger.info("CONFIG:   --name 'vital-chatwoot-bridge/chatwoot-api-token' \\")
        logger.info("CONFIG:   --description 'Chatwoot API access token' \\")
        logger.info("CONFIG:   --secret-string 'your-chatwoot-api-token' \\")
        logger.info("CONFIG:   --region REGION")
        logger.info("")
        
        # Account ID secret
        logger.info("CONFIG: # Chatwoot Account ID")
        logger.info("CONFIG: aws secretsmanager create-secret \\")
        logger.info("CONFIG:   --name 'vital-chatwoot-bridge/chatwoot-account-id' \\")
        logger.info("CONFIG:   --description 'Chatwoot account ID' \\")
        logger.info("CONFIG:   --secret-string '1' \\")
        logger.info("CONFIG:   --region REGION")
        logger.info("")
        
        # Inbox-Agent Mappings secret
        logger.info("CONFIG: # Inbox-Agent Mappings (JSON Configuration)")
        logger.info("CONFIG: aws secretsmanager create-secret \\")
        logger.info("CONFIG:   --name 'vital-chatwoot-bridge/inbox-agent-mappings' \\")
        logger.info("CONFIG:   --description 'Inbox to AI agent mappings configuration' \\")
        logger.info(f"CONFIG:   --secret-string '{mappings_json}' \\")
        logger.info("CONFIG:   --region REGION")
        logger.info("")
        
        logger.info("CONFIG: üìù To update an existing secret:")
        logger.info("CONFIG: aws secretsmanager update-secret \\")
        logger.info("CONFIG:   --secret-id 'vital-chatwoot-bridge/inbox-agent-mappings' \\")
        logger.info(f"CONFIG:   --secret-string '{mappings_json}' \\")
        logger.info("CONFIG:   --region REGION")
        logger.info("")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå CONFIG: Error generating AWS commands: {e}")
        return False

def validate_json_config(config_file: str):
    """Validate the JSON configuration file."""
    try:
        config_path = Path(config_file)
        
        if not config_path.exists():
            logger.error(f"‚ùå CONFIG: Configuration file not found: {config_file}")
            return False
        
        with open(config_path, 'r') as f:
            config_data = json.load(f)
        
        # Validate structure
        if not isinstance(config_data, list):
            logger.error("‚ùå CONFIG: Configuration must be a JSON array")
            return False
        
        required_fields = ['inbox_id', 'agent_config']
        agent_required_fields = ['agent_id', 'websocket_url']
        
        for i, mapping in enumerate(config_data):
            # Check mapping structure
            for field in required_fields:
                if field not in mapping:
                    logger.error(f"‚ùå CONFIG: Missing field '{field}' in mapping {i}")
                    return False
            
            # Check agent config structure
            agent_config = mapping['agent_config']
            for field in agent_required_fields:
                if field not in agent_config:
                    logger.error(f"‚ùå CONFIG: Missing field 'agent_config.{field}' in mapping {i}")
                    return False
        
        logger.info(f"‚úÖ CONFIG: Configuration file is valid ({len(config_data)} mappings)")
        return True
        
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå CONFIG: Invalid JSON in configuration file: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå CONFIG: Error validating configuration: {e}")
        return False

def main():
    """Main function."""
    if len(sys.argv) < 2:
        logger.info("CONFIG: Usage:")
        logger.info("CONFIG:   python set_config_env.py local      # Set local .env file")
        logger.info("CONFIG:   python set_config_env.py aws        # Generate AWS CLI commands")
        logger.info("CONFIG:   python set_config_env.py validate   # Validate JSON config")
        sys.exit(1)
    
    command = sys.argv[1]
    project_root = Path(__file__).parent.parent
    config_file = project_root / "config" / "inbox_agent_mappings.json"
    
    if command == "local":
        success = set_local_env_vars()
        sys.exit(0 if success else 1)
    
    elif command == "aws":
        success = generate_aws_secrets_commands()
        sys.exit(0 if success else 1)
    
    elif command == "validate":
        success = validate_json_config(config_file)
        sys.exit(0 if success else 1)
    
    else:
        logger.error(f"CONFIG: ‚ùå Unknown command: {command}")
        sys.exit(1)

if __name__ == "__main__":
    main()
